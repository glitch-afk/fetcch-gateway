import { useState } from "react"
import FetcchModal from "./fetcch-modal"
import QRCode from "qrcode"

const CryptoForm = () => {
  const [openQR, setOpenQR] = useState(false)
  const [walletID, setWalletID] = useState<string>("")
  const [qrImg, setQRImg] = useState<string>("")

  const generateQR = async (text: string) => {
    try {
      const img = await QRCode.toDataURL(text, {
        color: {
          dark: "#2B67E8",
          light: "#E3ECFF",
        },
      })
      setQRImg(img)
    } catch (err) {
      console.error(err)
    }
  }

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    console.log("Form Submitted")
  }

  return (
    <>
      <form
        className="flex w-full flex-col space-y-8"
        onSubmit={(e) => handleSubmit(e)}
      >
        <div className="flex w-full flex-col space-y-2">
          <label
            htmlFor="wallet_id"
            className="text-sm font-bold text-secondary"
          >
            Enter Wallet ID
          </label>
          <div className="relative h-10 w-full rounded-full border border-[rgba(60,66,87,0.12)] bg-white py-2 pl-5 shadow-input">
            <input
              onChange={(e) => setWalletID(e.target.value)}
              type="text"
              name="wallet_id"
              className="w-4/5 border-none bg-white outline-none placeholder:text-secondary"
              placeholder="id@wallet"
              spellCheck={false}
            />
            <button className="absolute right-2 h-6 w-12 rounded-full bg-black text-white">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="47"
                height="24"
                viewBox="0 0 47 24"
                fill="none"
              >
                <rect y="0.5" width="47" height="23" rx="11.5" fill="black" />
                <path
                  d="M35.2645 13.4149V14.4874H37V13.2069C37 12.7909 36.9545 12.4074 36.87 12.0694C36.792 11.7314 36.6555 11.4324 36.454 11.1854C36.259 10.9384 35.999 10.7499 35.661 10.6134C35.336 10.4769 34.9265 10.4054 34.4261 10.4054C34.2571 10.4054 34.0751 10.4249 33.8931 10.4639C33.7176 10.4964 33.5681 10.5289 33.4511 10.5679V7.63647L31.7156 7.91597V16.6584H33.4511V12.0044C33.5616 11.9719 33.6786 11.9459 33.8086 11.9199C33.9451 11.8874 34.0946 11.8744 34.2506 11.8744C34.6405 11.8744 34.9005 11.9914 35.0435 12.2254C35.193 12.4594 35.2645 12.8559 35.2645 13.4149Z"
                  fill="white"
                />
                <path
                  d="M36.9999 16.6648L35.2449 16.5066V14.9749H36.9999V16.6648Z"
                  fill="#FDAE40"
                />
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M31.1171 13.5514C30.5646 14.0779 29.8236 14.3964 28.9981 14.3964C27.3081 14.3964 25.9366 13.0249 25.9366 11.3349C25.9366 9.64493 27.3081 8.27344 28.9981 8.27344C29.8301 8.27344 30.5841 8.60493 31.1366 9.14443L30.0316 10.2494C29.7586 9.99592 29.3946 9.83992 28.9851 9.83992C28.1401 9.83992 27.4576 10.5224 27.4576 11.3674C27.4576 12.2124 28.1401 12.8949 28.9851 12.8949C29.3946 12.8949 29.7586 12.7389 30.0381 12.4789L31.1171 13.5514Z"
                  fill="#FDAE40"
                />
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M31.1172 15.7809C30.5647 16.3074 29.8237 16.6259 28.9982 16.6259C27.3083 16.6259 25.9368 15.2544 25.9368 13.5644C25.9368 11.8744 27.3083 10.5029 28.9982 10.5029C29.8302 10.5029 30.5842 10.8344 31.1367 11.3739L30.0382 12.4789C29.7652 12.2254 29.3947 12.0694 28.9852 12.0694C28.1402 12.0694 27.4578 12.7519 27.4578 13.5969C27.4578 14.4419 28.1402 15.1244 28.9852 15.1244C29.3947 15.1244 29.7587 14.9684 30.0382 14.7084L31.1172 15.7809Z"
                  fill="#FF5D46"
                />
                <path
                  d="M25.326 15.0075C25.1635 15.0725 24.9815 15.118 24.78 15.157C24.585 15.1895 24.3965 15.2025 24.208 15.2025C23.818 15.2025 23.558 15.092 23.428 14.8775C23.3045 14.663 23.2395 14.3705 23.2395 14.0065V11.855H25.3195V10.4121H23.2395V8.61157L21.504 8.89107V14.0325C21.504 14.429 21.5365 14.7865 21.608 15.1115C21.686 15.4365 21.816 15.716 22.0045 15.95C22.193 16.1775 22.44 16.353 22.752 16.483C23.064 16.6065 23.454 16.6715 23.9285 16.6715C24.299 16.6715 24.6175 16.639 24.871 16.5805C25.1245 16.5155 25.3585 16.444 25.5665 16.3595L25.326 15.0075Z"
                  fill="white"
                />
                <path
                  d="M18.0656 10.2495C17.6951 10.2495 17.3311 10.321 16.9736 10.4575C16.6226 10.594 16.3171 10.802 16.0441 11.075C15.7711 11.348 15.5502 11.686 15.3812 12.0955C15.2187 12.4985 15.1342 12.973 15.1342 13.5125C15.1342 13.961 15.1992 14.3835 15.3227 14.767C15.4527 15.157 15.6542 15.495 15.9141 15.781C16.1871 16.0605 16.5251 16.2815 16.9281 16.444C17.3376 16.6065 17.8186 16.691 18.3711 16.691C18.5856 16.691 18.8066 16.678 19.0211 16.6585C19.2356 16.6325 19.4371 16.6065 19.6256 16.5675C19.8206 16.535 19.9961 16.496 20.1521 16.4505C20.3081 16.405 20.4316 16.3595 20.5226 16.314L20.2886 14.9035C20.0936 14.988 19.8401 15.0595 19.5346 15.1245C19.2291 15.1765 18.9236 15.209 18.6051 15.209C18.1111 15.209 17.7146 15.105 17.4156 14.897C17.1231 14.689 16.9541 14.403 16.9151 14.0455H20.8476C20.8541 13.9545 20.8606 13.8505 20.8736 13.7335C20.8801 13.61 20.8866 13.4995 20.8866 13.3955C20.8866 12.362 20.6331 11.582 20.1326 11.0555C19.6191 10.516 18.9366 10.2495 18.0656 10.2495ZM16.9151 12.856C16.9411 12.7065 16.9736 12.5635 17.0191 12.427C17.0711 12.2775 17.1491 12.154 17.2401 12.0435C17.3311 11.933 17.4481 11.8485 17.5911 11.79C17.7276 11.7185 17.8966 11.686 18.0916 11.686C18.2931 11.686 18.4621 11.7185 18.5921 11.79C18.7286 11.8615 18.8456 11.946 18.9301 12.0565C19.0211 12.167 19.0861 12.2905 19.1251 12.427C19.1706 12.5635 19.1966 12.713 19.2096 12.856H16.9151Z"
                  fill="white"
                />
                <path
                  d="M12.781 9.65148C12.82 9.51498 12.8785 9.39148 12.9565 9.29398C13.041 9.18999 13.1515 9.11849 13.2945 9.05999C13.444 8.99499 13.6195 8.96899 13.8275 8.96899C13.9835 8.96899 14.1525 8.98849 14.328 9.02749C14.5165 9.05999 14.6855 9.11198 14.8415 9.17698L15.1795 7.7925C15.03 7.7275 14.822 7.669 14.549 7.604C14.276 7.5325 13.977 7.5 13.652 7.5C12.7745 7.5 12.1115 7.734 11.663 8.19549C11.221 8.66349 11 9.28748 11 10.0805V14.4224H12.7355V11.8485H14.874V10.4055H12.7355V10.1C12.7355 9.94398 12.7485 9.79448 12.781 9.65148Z"
                  fill="white"
                />
                <path
                  d="M11 16.6714L12.7355 16.5089V14.9424H11V16.6714Z"
                  fill="#FF5D46"
                />
              </svg>
            </button>
          </div>
        </div>
        {/* qrcode button */}
        <button
          type="button"
          onClick={() => {
            generateQR(walletID)
            setOpenQR(true)
          }}
          className="w-full rounded-full border border-[rgba(184,150,255,0.29)] bg-white py-3 text-lg font-medium text-[#9747FF] shadow-qr"
          disabled={walletID.length < 1 || walletID === undefined}
        >
          Show QR Code
        </button>
        {/* payment button */}
        <button
          disabled={walletID.length < 1 || walletID === undefined}
          className="w-full rounded-full bg-primary py-3 text-lg text-white"
          type="submit"
        >
          Pay
        </button>
      </form>
      <FetcchModal qrImg={qrImg} isOpen={openQR} setIsOpen={setOpenQR} />
    </>
  )
}

export default CryptoForm
